# -*- coding: utf-8 -*-
"""feature_inspector.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-wQRkUJ1aPXxPHjYKdiyyvkrM55QXozE
"""

from google.colab import drive
import glob

drive.mount('/content/drive')

base_dir = "/content/drive/MyDrive/fault_loc_dataset/"
paths_b1 = glob.glob(base_dir + '*_b1_*.py')
paths_b2 = glob.glob(base_dir + '*_b2_*.py')
paths_b3 = glob.glob(base_dir + '*_b3_*.py')
paths_b4 = glob.glob(base_dir + '*_b4_*.py')
paths_b5 = glob.glob(base_dir + '*_b5_*.py')
paths_b6 = glob.glob(base_dir + '*_b6_*.py')
paths_b7 = glob.glob(base_dir + '*_b7_*.py')
paths_b8 = glob.glob(base_dir + '*_b8_*.py')
paths_b9 = glob.glob(base_dir + '*_b9_*.py')
paths_b10 = glob.glob(base_dir + '*_b10_*.py')
paths_b11 = glob.glob(base_dir + '*_b11_*.py')
paths_b12 = glob.glob(base_dir + '*_b12_*.py')

import pandas as pd
from sklearn.model_selection import train_test_split
from imblearn.over_sampling import RandomOverSampler

df = pd.read_csv("/content/new_data.csv")
df.columns

df

data_frame = pd.get_dummies(df, columns=['NodeType', 'units', 'activation', 'recurrent_activation',
       'recurrent_regularizer', 'activity_regularizer', 'recurrent_dropout',
       'pre_mlp', 'post_mlp', 'pre_norm', 'post_norm', 'depth'])

data_frame.shape

targets = data_frame['target']
features = data_frame.drop(columns=['target'])
ros = RandomOverSampler(random_state=42)
features, targets = ros.fit_resample(features, targets)
targets = pd.get_dummies(targets)

features = np.load('features_inspector_features.npy')
targets = np.load('features_inspector_targets.npy')

features_train, features_test, targets_train, targets_test = train_test_split(features,
                                                                              targets, test_size=0.2, random_state=42)
features_train, features_val, targets_train, targets_val = train_test_split(features_train, targets_train, test_size=0.2, random_state=42)

targets.shape

from keras import layers, Sequential, losses, metrics


model = Sequential()
model.add(layers.Dense(128, activation='relu'))
model.add(layers.Dropout(0.5))
model.add(layers.Dense(64, activation='relu'))
model.add(layers.Dropout(0.5))
model.add(layers.Dense(11))

model.compile(optimizer='adam',
              loss=losses.CategoricalCrossentropy(from_logits=True),
              metrics=['accuracy', metrics.AUC(from_logits=True)])

model.fit(features_train, targets_train, epochs=5, validation_data=(features_val, targets_val))
model.evaluate(features_test, targets_test)

